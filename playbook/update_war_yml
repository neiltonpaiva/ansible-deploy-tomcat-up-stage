---
- name: "Deploy WAR Updates - Ubuntu Environment (preservando custom + custom_fsw)"
  hosts: frontend_servers
  serial: "{{ deployment_batch_size | default(2) }}"  # 2 servidores Ubuntu por vez
  gather_facts: yes
  vars:
    deploy_timestamp: "{{ ansible_date_time.epoch }}"
    deploy_date: "{{ ansible_date_time.date }}"
    update_source: "{{ fsx_mount }}/staging"
    
  pre_tasks:
    - name: "Verificar OS (deve ser Ubuntu)"
      fail:
        msg: "Este playbook é específico para Ubuntu. OS detectado: {{ ansible_distribution }}"
      when: ansible_distribution != "Ubuntu"
      
    - name: "Validar source dos updates"
      stat:
        path: "{{ update_source }}/webapps"
      register: war_source
      delegate_to: localhost
      run_once: true
      
    - name: "Falhar se source não existir"
      fail:
        msg: "Source de WAR não encontrado: {{ update_source }}/webapps"
      when: not war_source.stat.exists
      delegate_to: localhost
      run_once: true

    - name: "Verificar espaço em disco disponível"
      shell: df -h {{ tomcat_home }} | tail -1 | awk '{print $5}' | sed 's/%//'
      register: disk_usage
      become: yes
      
    - name: "Falhar se pouco espaço em disco"
      fail:
        msg: "Espaço em disco insuficiente: {{ disk_usage.stdout }}% usado"
      when: disk_usage.stdout | int > 85

  tasks:
    - name: "Coletar informações do sistema Ubuntu"
      setup:
        filter: "ansible_distribution*,ansible_kernel,ansible_memtotal_mb"
      
    - name: "Exibir informações do servidor"
      debug:
        msg: |
          Servidor: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Kernel: {{ ansible_kernel }}
          Memória: {{ ansible_memtotal_mb }}MB

    - name: "Verificar diretórios custom existentes"
      shell: |
        echo "=== Diretórios Custom Existentes ==="
        if [ -d "{{ tomcat_home }}/webapps/custom" ]; then
          echo "✓ custom: $(du -sh {{ tomcat_home }}/webapps/custom | cut -f1)"
        else
          echo "✗ custom: não existe"
        fi
        if [ -d "{{ tomcat_home }}/webapps/custom_fsw" ]; then
          echo "✓ custom_fsw: $(du -sh {{ tomcat_home }}/webapps/custom_fsw | cut -f1)"
        else
          echo "✗ custom_fsw: não existe"
        fi
      become: yes
      register: custom_dirs_check
      
    - name: "Log dos diretórios custom"
      debug:
        msg: "{{ custom_dirs_check.stdout }}"

    - name: "Criar diretório de backup"
      file:
        path: "{{ backup_base_dir }}/{{ deploy_date }}"
        state: directory
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_user }}"
        mode: '0755'
      become: yes

    - name: "Verificar status inicial do Tomcat"
      systemd:
        name: "{{ tomcat_service }}"
      register: tomcat_initial_status
      become: yes

    - name: "Backup dos WARs atuais (excluindo custom e custom_fsw)"
      shell: |
        cd {{ tomcat_home }}/webapps
        if ls *.war 1> /dev/null 2>&1; then
          tar -czf {{ backup_base_dir }}/{{ deploy_date }}/{{ inventory_hostname }}_webapps_{{ deploy_timestamp }}.tar.gz \
            --exclude=custom \
            --exclude=custom_fsw \
            *.war
          echo "Backup criado com $(ls *.war | wc -l) arquivos WAR (preservando custom/custom_fsw)"
        else
          echo "Nenhum WAR encontrado para backup"
        fi
      become: yes
      register: backup_result
      
    - name: "Log do backup"
      debug:
        msg: "{{ backup_result.stdout }}"
      
    - name: "Parar Tomcat gracefully (Ubuntu systemd)"
      systemd:
        name: "{{ tomcat_service }}"
        state: stopped
      become: yes
      register: tomcat_stop
      
    - name: "Aguardar Tomcat parar completamente"
      wait_for:
        port: "{{ tomcat_port }}"
        state: stopped
        timeout: "{{ service_management.stop_timeout | default(60) }}"
        
    - name: "Verificar se processo Tomcat foi finalizado (Ubuntu)"
      shell: |
        pgrep -f "{{ tomcat_home }}" || echo "Nenhum processo Tomcat encontrado"
      register: tomcat_processes
      become: yes
      
    - name: "Forçar kill se necessário (Ubuntu)"
      shell: |
        pids=$(pgrep -f "{{ tomcat_home }}")
        if [ -n "$pids" ]; then
          echo "Forçando encerramento dos processos: $pids"
          kill -9 $pids
          sleep 5
        else
          echo "Nenhum processo para encerrar"
        fi
      become: yes
      when: tomcat_processes.stdout != "Nenhum processo Tomcat encontrado"
      
    - name: "Remover WARs antigos (preservando custom e custom_fsw)"
      shell: |
        cd {{ tomcat_home }}/webapps
        
        # Log do que será preservado
        if [ -d "custom" ]; then
          echo "Preservando diretório custom"
        fi
        if [ -d "custom_fsw" ]; then
          echo "Preservando diretório custom_fsw"
        fi
        
        # Remover WARs (excluindo custom e custom_fsw)
        find . -maxdepth 1 -name "*.war" -not -path "./custom/*" -not -path "./custom_fsw/*" -delete
        
        # Remover diretórios expandidos (exceto custom, custom_fsw e ROOT)
        find . -maxdepth 1 -type d \
          -not -name "custom" \
          -not -name "custom_fsw" \
          -not -name "ROOT" \
          -not -name "." \
          -exec rm -rf {} + 2>/dev/null || true
        
        echo "Limpeza concluída (custom e custom_fsw preservados)"
      become: yes

    - name: "Sincronizar novos WARs do FSx (Ubuntu rsync)"
      synchronize:
        src: "{{ update_source }}/webapps/"
        dest: "{{ tomcat_home }}/webapps/"
        delete: no  # Não deletar custom/custom_fsw
        rsync_opts:
          - "--exclude=custom"
          - "--exclude=custom_fsw"
          - "--chown={{ tomcat_user }}:{{ tomcat_user }}"
          - "--chmod=755"
        mode: push
      become: yes
      register: sync_result
      
    - name: "Verificar arquivos sincronizados"
      shell: |
        cd {{ tomcat_home }}/webapps
        echo "Arquivos WAR após sincronização:"
        ls -la *.war 2>/dev/null || echo "Nenhum arquivo WAR encontrado"
        echo "Total de WARs: $(find . -name '*.war' | wc -l)"
        echo ""
        echo "Diretórios preservados:"
        if [ -d "custom" ]; then
          echo "✓ custom: $(du -sh custom | cut -f1)"
        fi
        if [ -d "custom_fsw" ]; then
          echo "✓ custom_fsw: $(du -sh custom_fsw | cut -f1)"
        fi
      become: yes
      register: war_count
      
    - name: "Log da sincronização"
      debug:
        msg: "{{ war_count.stdout }}"
      
    - name: "Definir permissões corretas (Ubuntu)"
      file:
        path: "{{ tomcat_home }}/webapps"
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_user }}"
        mode: '0755'
        recurse: yes
      become: yes
      
    - name: "Iniciar Tomcat (Ubuntu systemd)"
      systemd:
        name: "{{ tomcat_service }}"
        state: started
        enabled: yes
        daemon_reload: yes
      become: yes
      register: tomcat_start
      
    - name: "Aguardar Tomcat inicializar (Ubuntu)"
      wait_for:
        port: "{{ tomcat_port }}"
        timeout: "{{ deploy_timeout }}"
        delay: 10
        
    - name: "Aguardar deploy dos WARs (monitoring logs Ubuntu)"
      shell: |
        timeout 300 tail -f {{ tomcat_log_file }} | while read line; do
          echo "$line"
          echo "$line" | grep -q "Deployment of web application" && break
          echo "$line" | grep -q "Server startup in" && break
        done 2>/dev/null || echo "Timeout aguardando deploy"
      become: yes
      register: war_deployment
      
    - name: "Health check da aplicação (Ubuntu curl)"
      uri:
        url: "https://{{ ansible_default_ipv4.address }}:{{ tomcat_port }}/totvs-menu"
        method: GET
        status_code: [200, 302, 301]  # Aceitar redirecionamentos
        timeout: 30
        validate_certs: no
        follow_redirects: yes
      register: health_check_result
      retries: "{{ health_check_retries }}"
      delay: "{{ health_check_delay }}"
      ignore_errors: yes
      
    - name: "Verificar logs de erro no Tomcat (Ubuntu)"
      shell: |
        tail -100 {{ tomcat_log_file }} | grep -i "error\|exception\|failed\|severe" | tail -5 || echo "Nenhum erro recente encontrado"
      become: yes
      register: tomcat_errors
      ignore_errors: yes
      
    - name: "Verificar uso de recursos pós-deploy (Ubuntu)"
      shell: |
        echo "=== Uso de Memória ==="
        free -h
        echo ""
        echo "=== Uso de CPU ==="
        top -bn1 | grep "load average" 
        echo ""
        echo "=== Processos Java ==="
        pgrep -fl java || echo "Nenhum processo Java encontrado"
      register: resource_usage
      become: yes
      
    - name: "Verificação final dos diretórios custom"
      shell: |
        cd {{ tomcat_home }}/webapps
        echo "=== Verificação Final Custom ==="
        if [ -d "custom" ]; then
          echo "✓ custom preservado: $(ls custom/ | wc -l) arquivos"
        else
          echo "✗ custom não encontrado"
        fi
        if [ -d "custom_fsw" ]; then
          echo "✓ custom_fsw preservado: $(ls custom_fsw/ | wc -l) arquivos"
        else
          echo "✗ custom_fsw não encontrado"
        fi
      become: yes
      register: final_custom_check
      
    - name: "Relatório de deploy Ubuntu (com custom/custom_fsw)"
      debug:
        msg: |
          ===============================================
          DEPLOY WAR COMPLETO - {{ inventory_hostname }}
          ===============================================
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Status Tomcat: {{ 'OK' if tomcat_start.changed else 'ERRO' }}
          Health Check: {{ 'OK' if health_check_result.status == 200 else 'ALERTA - Status: ' + (health_check_result.status | string) }}
          Backup: {{ backup_base_dir }}/{{ deploy_date }}/{{ inventory_hostname }}_webapps_{{ deploy_timestamp }}.tar.gz
          Timestamp: {{ deploy_timestamp }}
          
          🔒 Diretórios Preservados:
          {{ final_custom_check.stdout }}
          
          Recursos pós-deploy:
          {{ resource_usage.stdout }}
          
          {% if tomcat_errors.stdout and tomcat_errors.stdout != "Nenhum erro recente encontrado" %}
          ⚠️ Erros encontrados nos logs:
          {{ tomcat_errors.stdout }}
          {% endif %}
          ===============================================

  post_tasks:
    - name: "Limpeza de backups antigos (Ubuntu find)"
      find:
        paths: "{{ backup_base_dir }}"
        age: "{{ backup_retention_days }}d"
        file_type: file
        patterns: "*.tar.gz"
      register: old_backups
      become: yes
      
    - name: "Remover backups antigos"
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      become: yes
      when: old_backups.files is defined and old_backups.files | length > 0
      
    - name: "Log final do deploy"
      lineinfile:
        path: "{{ fsx_mount }}/logs/deploy-history.log"
        line: "{{ ansible_date_time.iso8601 }} - WAR Deploy - {{ inventory_hostname }} - SUCCESS - custom+custom_fsw preserved"
        create: yes
      delegate_to: localhost
      run_once: true