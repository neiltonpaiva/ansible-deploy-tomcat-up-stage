---
- name: "Deploy Version Updates - Estrutura Simples (webapps, Datasul-report, lib) - Preservando custom + custom_fsw"
  hosts: frontend_servers
  serial: 1  # Um servidor por vez para updates de vers√£o
  gather_facts: yes
  vars:
    deploy_timestamp: "{{ ansible_date_time.epoch }}"
    deploy_date: "{{ ansible_date_time.date }}"
    version_source: "{{ fsx_mount }}/staging/version"  # ‚Üê Diret√≥rio fixo
    
  pre_tasks:
    - name: "Validar se diret√≥rio VERSION existe"
      stat:
        path: "{{ version_source }}"
      register: version_dir
      delegate_to: localhost
      run_once: true
      
    - name: "Falhar se diret√≥rio VERSION n√£o existir"
      fail:
        msg: "Diret√≥rio VERSION n√£o encontrado: {{ version_source }}"
      when: not version_dir.stat.exists
      delegate_to: localhost
      run_once: true

    - name: "Validar subdiret√≥rios obrigat√≥rios"
      stat:
        path: "{{ version_source }}/{{ item }}"
      register: version_subdirs
      loop:
        - webapps
        - Datasul-report
        - lib
      delegate_to: localhost
      run_once: true
      
    - name: "Verificar se todos os subdiret√≥rios existem"
      fail:
        msg: "Subdiret√≥rio obrigat√≥rio n√£o encontrado: {{ version_source }}/{{ item.item }}"
      loop: "{{ version_subdirs.results }}"
      when: not item.stat.exists
      delegate_to: localhost
      run_once: true

    - name: "Verificar conte√∫do dos diret√≥rios de vers√£o"
      find:
        paths: "{{ version_source }}/{{ item }}"
        file_type: file
      register: version_contents
      loop:
        - webapps
        - Datasul-report  
        - lib
      delegate_to: localhost
      run_once: true

    - name: "Exibir conte√∫do encontrado para deploy de vers√£o"
      debug:
        msg: |
          Conte√∫do encontrado para deploy de vers√£o:
          
          üì¶ WEBAPPS:
          {% set webapps_files = version_contents.results[0].files %}
          {% if webapps_files %}
          {% for file in webapps_files %}
          - {{ file.path | basename }} ({{ (file.size / 1024 / 1024) | round(2) }} MB)
          {% endfor %}
          Total: {{ webapps_files | length }} arquivo(s)
          {% else %}
          ‚ö†Ô∏è Nenhum arquivo encontrado em webapps
          {% endif %}
          
          üìã DATASUL-REPORT:
          {% set datasul_files = version_contents.results[1].files %}
          {% if datasul_files %}
          {% for file in datasul_files %}
          - {{ file.path | basename }}
          {% endfor %}
          Total: {{ datasul_files | length }} arquivo(s)
          {% else %}
          ‚ö†Ô∏è Nenhum arquivo encontrado em Datasul-report
          {% endif %}
          
          üìö LIB:
          {% set lib_files = version_contents.results[2].files %}
          {% if lib_files %}
          {% for file in lib_files %}
          - {{ file.path | basename }} ({{ (file.size / 1024 / 1024) | round(2) }} MB)
          {% endfor %}
          Total: {{ lib_files | length }} arquivo(s)
          {% else %}
          ‚ö†Ô∏è Nenhum arquivo encontrado em lib
          {% endif %}

    - name: "Verificar espa√ßo em disco para version update"
      shell: |
        available=$(df {{ tomcat_home }} | tail -1 | awk '{print $4}')
        required=2097152  # 2GB em KB
        if [ $available -lt $required ]; then
          echo "INSUFFICIENT_SPACE"
        else
          echo "OK"
        fi
      register: disk_space_check
      become: yes
      
    - name: "Falhar se espa√ßo insuficiente"
      fail:
        msg: "Espa√ßo em disco insuficiente para update de vers√£o"
      when: disk_space_check.stdout == "INSUFFICIENT_SPACE"

    - name: "Confirma√ß√£o de deploy de vers√£o"
      pause:
        prompt: |
          ==========================================
          ATEN√á√ÉO: DEPLOY DE VERS√ÉO COMPLETA
          ==========================================
          Servidor: {{ inventory_hostname }}
          OS: {{ ansible_distribution | default('N/A') }} {{ ansible_distribution_version | default('') }}
          
          Diret√≥rios que ser√£o atualizados:
          - {{ tomcat_home }}/webapps
          - {{ tomcat_home }}/Datasul-report  
          - {{ tomcat_home }}/lib
          
          Diret√≥rios preservados:
          - {{ tomcat_home }}/webapps/custom
          - {{ tomcat_home }}/webapps/custom_fsw
          
          Source: {{ version_source }}
          
          Continuar? (Ctrl+C para cancelar)
      when: inventory_hostname == play_hosts[0]  # S√≥ pergunta uma vez

  tasks:
    - name: "Coletar informa√ß√µes detalhadas do sistema"
      setup:
        filter: "ansible_distribution*,ansible_kernel,ansible_memtotal_mb,ansible_processor*"
      
    - name: "Exibir informa√ß√µes completas do servidor"
      debug:
        msg: |
          ==========================================
          INFORMA√á√ïES DO SERVIDOR
          ==========================================
          Hostname: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Kernel: {{ ansible_kernel }}
          CPU: {{ ansible_processor_vcpus }} vCPUs
          Mem√≥ria: {{ ansible_memtotal_mb }}MB
          ==========================================

    - name: "Verificar diret√≥rios custom existentes antes do deploy"
      shell: |
        echo "=== Diret√≥rios Custom Pr√©-Deploy ==="
        custom_found=""
        if [ -d "{{ tomcat_home }}/webapps/custom" ]; then
          custom_size=$(du -sh {{ tomcat_home }}/webapps/custom | cut -f1)
          custom_files=$(find {{ tomcat_home }}/webapps/custom -type f | wc -l)
          echo "‚úì custom: $custom_size ($custom_files arquivos)"
          custom_found="custom "
        else
          echo "‚úó custom: n√£o existe"
        fi
        
        if [ -d "{{ tomcat_home }}/webapps/custom_fsw" ]; then
          custom_fsw_size=$(du -sh {{ tomcat_home }}/webapps/custom_fsw | cut -f1)
          custom_fsw_files=$(find {{ tomcat_home }}/webapps/custom_fsw -type f | wc -l)
          echo "‚úì custom_fsw: $custom_fsw_size ($custom_fsw_files arquivos)"
          custom_found="${custom_found}custom_fsw "
        else
          echo "‚úó custom_fsw: n√£o existe"
        fi
        
        if [ -z "$custom_found" ]; then
          echo "‚ÑπÔ∏è Nenhum diret√≥rio custom encontrado para preservar"
        else
          echo "üîí Ser√£o preservados: $custom_found"
        fi
      become: yes
      register: pre_deploy_custom_check
      
    - name: "Log da verifica√ß√£o pr√©-deploy"
      debug:
        msg: "{{ pre_deploy_custom_check.stdout }}"

    - name: "Criar diret√≥rio de backup para vers√£o"
      file:
        path: "{{ backup_base_dir }}/version/{{ deploy_date }}"
        state: directory
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_user }}"
        mode: '0755'
      become: yes

    - name: "Parar Tomcat para update de vers√£o"
      systemd:
        name: "{{ tomcat_service }}"
        state: stopped
      become: yes
      register: version_tomcat_stop
      
    - name: "Aguardar Tomcat parar completamente"
      wait_for:
        port: "{{ tomcat_port }}"
        state: stopped
        timeout: 120

    - name: "Verificar e encerrar processos restantes"
      shell: |
        pids=$(pgrep -f "{{ tomcat_home }}")
        if [ -n "$pids" ]; then
          echo "Encerrando processos restantes: $pids"
          kill -15 $pids
          sleep 10
          # Force kill se ainda existir
          remaining=$(pgrep -f "{{ tomcat_home }}")
          if [ -n "$remaining" ]; then
            echo "Force killing: $remaining"
            kill -9 $remaining
          fi
        else
          echo "Nenhum processo Tomcat encontrado"
        fi
      become: yes

    - name: "Backup completo da vers√£o atual"
      shell: |
        cd {{ tomcat_home }}
        echo "Criando backup completo..."
        tar -czf {{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_full_backup_{{ deploy_timestamp }}.tar.gz \
          webapps Datasul-report lib
        
        # Verificar tamanho do backup
        backup_size=$(du -h {{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_full_backup_{{ deploy_timestamp }}.tar.gz | cut -f1)
        echo "Backup completo criado: $backup_size"
      become: yes
      register: full_backup_result
      
    - name: "Log do backup completo"
      debug:
        msg: "{{ full_backup_result.stdout }}"
      
    - name: "Backup espec√≠fico dos diret√≥rios custom e custom_fsw"
      shell: |
        backup_created=""
        cd {{ tomcat_home }}/webapps
        
        # Backup do custom
        if [ -d "custom" ]; then
          tar -czf {{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_custom_{{ deploy_timestamp }}.tar.gz custom/
          custom_size=$(du -h {{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_custom_{{ deploy_timestamp }}.tar.gz | cut -f1)
          backup_created="custom($custom_size) "
          echo "‚úì Backup custom criado: $custom_size"
        else
          echo "‚úó custom n√£o existe para backup"
        fi
        
        # Backup do custom_fsw
        if [ -d "custom_fsw" ]; then
          tar -czf {{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_custom_fsw_{{ deploy_timestamp }}.tar.gz custom_fsw/
          custom_fsw_size=$(du -h {{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_custom_fsw_{{ deploy_timestamp }}.tar.gz | cut -f1)
          backup_created="${backup_created}custom_fsw($custom_fsw_size) "
          echo "‚úì Backup custom_fsw criado: $custom_fsw_size"
        else
          echo "‚úó custom_fsw n√£o existe para backup"
        fi
        
        if [ -n "$backup_created" ]; then
          echo "üîí Backups custom criados: $backup_created"
        else
          echo "‚ÑπÔ∏è Nenhum diret√≥rio custom para backup"
        fi
      become: yes
      register: custom_backup
      
    - name: "Limpar diret√≥rios atuais (preservando custom/custom_fsw temporariamente)"
      shell: |
        echo "üîí Preservando diret√≥rios custom temporariamente..."
        
        # Preservar custom temporariamente
        if [ -d "{{ tomcat_home }}/webapps/custom" ]; then
          echo "Movendo custom para /tmp/custom_temp_{{ deploy_timestamp }}"
          cp -r {{ tomcat_home }}/webapps/custom /tmp/custom_temp_{{ deploy_timestamp }}
          echo "‚úì custom preservado temporariamente"
        fi
        
        # Preservar custom_fsw temporariamente
        if [ -d "{{ tomcat_home }}/webapps/custom_fsw" ]; then
          echo "Movendo custom_fsw para /tmp/custom_fsw_temp_{{ deploy_timestamp }}"
          cp -r {{ tomcat_home }}/webapps/custom_fsw /tmp/custom_fsw_temp_{{ deploy_timestamp }}
          echo "‚úì custom_fsw preservado temporariamente"
        fi
        
        echo "üóëÔ∏è Limpando diret√≥rios para nova vers√£o..."
        rm -rf {{ tomcat_home }}/webapps/*
        rm -rf {{ tomcat_home }}/Datasul-report/*  
        rm -rf {{ tomcat_home }}/lib/*
        
        echo "‚úÖ Diret√≥rios limpos (custom/custom_fsw preservados temporariamente)"
      become: yes
      register: cleanup_result
      
    - name: "Log da limpeza"
      debug:
        msg: "{{ cleanup_result.stdout }}"
      
    - name: "Atualizar webapps (estrutura simples)"
      shell: |
        echo "Copiando webapps de {{ version_source }}/webapps/ para {{ tomcat_home }}/webapps/"
        
        # Usar cp recursivo para copiar todo o conte√∫do
        if [ -d "{{ version_source }}/webapps" ]; then
          cp -r {{ version_source }}/webapps/* {{ tomcat_home }}/webapps/
          chown -R {{ tomcat_user }}:{{ tomcat_user }} {{ tomcat_home }}/webapps/
          chmod -R 755 {{ tomcat_home }}/webapps/
          
          # Contar arquivos copiados
          copied_count=$(find {{ tomcat_home }}/webapps -maxdepth 1 \( -name "*.war" -o -name "*.WAR" \) | wc -l)
          echo "‚úì Webapps atualizados: $copied_count arquivos WAR"
        else
          echo "‚úó Diret√≥rio webapps source n√£o encontrado"
          exit 1
        fi
      become: yes
      register: webapps_update
      
    - name: "Atualizar Datasul-report (estrutura simples)"
      shell: |
        echo "Copiando Datasul-report de {{ version_source }}/Datasul-report/ para {{ tomcat_home }}/Datasul-report/"
        
        if [ -d "{{ version_source }}/Datasul-report" ]; then
          cp -r {{ version_source }}/Datasul-report/* {{ tomcat_home }}/Datasul-report/
          chown -R {{ tomcat_user }}:{{ tomcat_user }} {{ tomcat_home }}/Datasul-report/
          chmod -R 755 {{ tomcat_home }}/Datasul-report/
          
          # Contar arquivos copiados
          copied_count=$(find {{ tomcat_home }}/Datasul-report -type f | wc -l)
          echo "‚úì Datasul-report atualizado: $copied_count arquivos"
        else
          echo "‚úó Diret√≥rio Datasul-report source n√£o encontrado"
          exit 1
        fi
      become: yes
      register: datasul_update
      
    - name: "Atualizar lib (estrutura simples)"
      shell: |
        echo "Copiando lib de {{ version_source }}/lib/ para {{ tomcat_home }}/lib/"
        
        if [ -d "{{ version_source }}/lib" ]; then
          cp -r {{ version_source }}/lib/* {{ tomcat_home }}/lib/
          chown -R {{ tomcat_user }}:{{ tomcat_user }} {{ tomcat_home }}/lib/
          chmod -R 755 {{ tomcat_home }}/lib/
          
          # Contar arquivos copiados
          copied_count=$(find {{ tomcat_home }}/lib -name "*.jar" | wc -l)
          echo "‚úì Lib atualizado: $copied_count arquivos JAR"
        else
          echo "‚úó Diret√≥rio lib source n√£o encontrado"
          exit 1
        fi
      become: yes
      register: lib_update
      
    - name: "Restaurar diret√≥rios custom e custom_fsw"
      shell: |
        restored=""
        
        # Restaurar custom
        if [ -d "/tmp/custom_temp_{{ deploy_timestamp }}" ]; then
          echo "Restaurando custom..."
          mv /tmp/custom_temp_{{ deploy_timestamp }} {{ tomcat_home }}/webapps/custom
          chown -R {{ tomcat_user }}:{{ tomcat_user }} {{ tomcat_home }}/webapps/custom
          chmod -R 755 {{ tomcat_home }}/webapps/custom
          custom_files=$(find {{ tomcat_home }}/webapps/custom -type f | wc -l)
          restored="custom($custom_files arquivos) "
          echo "‚úì custom restaurado com $custom_files arquivos"
        else
          echo "‚úó custom n√£o encontrado para restaurar"
        fi
        
        # Restaurar custom_fsw
        if [ -d "/tmp/custom_fsw_temp_{{ deploy_timestamp }}" ]; then
          echo "Restaurando custom_fsw..."
          mv /tmp/custom_fsw_temp_{{ deploy_timestamp }} {{ tomcat_home }}/webapps/custom_fsw
          chown -R {{ tomcat_user }}:{{ tomcat_user }} {{ tomcat_home }}/webapps/custom_fsw
          chmod -R 755 {{ tomcat_home }}/webapps/custom_fsw
          custom_fsw_files=$(find {{ tomcat_home }}/webapps/custom_fsw -type f | wc -l)
          restored="${restored}custom_fsw($custom_fsw_files arquivos) "
          echo "‚úì custom_fsw restaurado com $custom_fsw_files arquivos"
        else
          echo "‚úó custom_fsw n√£o encontrado para restaurar"
        fi
        
        if [ -n "$restored" ]; then
          echo "üéâ Diret√≥rios restaurados com sucesso: $restored"
        else
          echo "‚ÑπÔ∏è Nenhum diret√≥rio custom para restaurar"
        fi
      become: yes
      register: custom_restore
      
    - name: "Verificar arquivos atualizados"
      shell: |
        echo "=== Verifica√ß√£o da Nova Vers√£o ==="
        echo "Webapps:"
        ls -la {{ tomcat_home }}/webapps/ | head -10
        echo ""
        echo "Lib:"
        ls -la {{ tomcat_home }}/lib/ | head -5
        echo ""
        echo "Datasul-report:"
        ls -la {{ tomcat_home }}/Datasul-report/ | head -5
        echo ""
        echo "=== Custom Directories Status ==="
        if [ -d "{{ tomcat_home }}/webapps/custom" ]; then
          echo "‚úì custom: $(ls {{ tomcat_home }}/webapps/custom/ | wc -l) arquivos"
        else
          echo "‚úó custom: n√£o encontrado"
        fi
        if [ -d "{{ tomcat_home }}/webapps/custom_fsw" ]; then
          echo "‚úì custom_fsw: $(ls {{ tomcat_home }}/webapps/custom_fsw/ | wc -l) arquivos"
        else
          echo "‚úó custom_fsw: n√£o encontrado"
        fi
      become: yes
      register: files_verification
      
    - name: "Log da verifica√ß√£o de arquivos"
      debug:
        msg: "{{ files_verification.stdout }}"
      
    - name: "Iniciar Tomcat ap√≥s update de vers√£o"
      systemd:
        name: "{{ tomcat_service }}"
        state: started
        enabled: yes
        daemon_reload: yes
      become: yes
      register: version_tomcat_start
      
    - name: "Aguardar inicializa√ß√£o completa (vers√£o nova pode demorar mais)"
      wait_for:
        port: "{{ tomcat_port }}"
        timeout: 900  # 15 minutos para vers√£o nova
        delay: 15
        
    - name: "Monitorar logs de inicializa√ß√£o"
      shell: |
        echo "Monitorando logs de startup..."
        timeout 600 tail -f {{ tomcat_log_file }} | while read line; do
          echo "$line"
          # Condi√ß√µes de sucesso
          if echo "$line" | grep -q "Server startup in"; then
            echo "=== STARTUP COMPLETO ==="
            break
          fi
          # Condi√ß√µes de erro
          if echo "$line" | grep -q "SEVERE\|Exception\|Error"; then
            echo "=== POSS√çVEL ERRO DETECTADO ==="
          fi
        done 2>/dev/null || echo "Timeout no monitoramento de logs"
      become: yes
      register: startup_monitoring
      
    - name: "Health check extensivo para nova vers√£o"
      uri:
        url: "https://{{ ansible_default_ipv4.address }}:{{ tomcat_port }}/totvs-menu"
        method: GET
        status_code: [200, 302, 301]
        timeout: 60
        validate_certs: no
        follow_redirects: yes
      register: version_health_check
      retries: 20
      delay: 30
      ignore_errors: yes
      
    - name: "Verifica√ß√£o final completa dos diret√≥rios custom"
      shell: |
        echo "=== VERIFICA√á√ÉO FINAL CUSTOM DIRECTORIES ==="
        custom_status=""
        
        if [ -d "{{ tomcat_home }}/webapps/custom" ]; then
          custom_size=$(du -sh {{ tomcat_home }}/webapps/custom | cut -f1)
          custom_files=$(find {{ tomcat_home }}/webapps/custom -type f | wc -l)
          echo "‚úÖ custom: $custom_size ($custom_files arquivos) - PRESERVADO"
          custom_status="custom:OK "
        else
          echo "‚ùå custom: N√ÉO ENCONTRADO"
          custom_status="custom:MISSING "
        fi
        
        if [ -d "{{ tomcat_home }}/webapps/custom_fsw" ]; then
          custom_fsw_size=$(du -sh {{ tomcat_home }}/webapps/custom_fsw | cut -f1)
          custom_fsw_files=$(find {{ tomcat_home }}/webapps/custom_fsw -type f | wc -l)
          echo "‚úÖ custom_fsw: $custom_fsw_size ($custom_fsw_files arquivos) - PRESERVADO"
          custom_status="${custom_status}custom_fsw:OK"
        else
          echo "‚ùå custom_fsw: N√ÉO ENCONTRADO"
          custom_status="${custom_status}custom_fsw:MISSING"
        fi
        
        echo "Status final: $custom_status"
      become: yes
      register: final_custom_verification
      
    - name: "Relat√≥rio completo de deploy de vers√£o"
      debug:
        msg: |
          ===============================================
          DEPLOY DE VERS√ÉO COMPLETO - {{ inventory_hostname }}
          ===============================================
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          
          üìÅ BACKUPS CRIADOS:
          - Full: {{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_full_backup_{{ deploy_timestamp }}.tar.gz
          - Custom Details: {{ custom_backup.stdout }}
          
          üöÄ STATUS DO DEPLOY:
          - Tomcat Stop: {{ 'OK' if version_tomcat_stop.changed else 'ERRO' }}
          - Tomcat Start: {{ 'OK' if version_tomcat_start.changed else 'ERRO' }}
          - Health Check: {{ 'OK' if version_health_check.status == 200 else 'VERIFICAR - Status: ' + (version_health_check.status | string) }}
          
          üîß ATUALIZA√á√ïES:
          - Webapps: {{ webapps_update.stdout.split('\n')[-1] if webapps_update.stdout else 'N/A' }}
          - Datasul-report: {{ datasul_update.stdout.split('\n')[-1] if datasul_update.stdout else 'N/A' }}
          - Lib: {{ lib_update.stdout.split('\n')[-1] if lib_update.stdout else 'N/A' }}
          
          üîí PRESERVA√á√ÉO CUSTOM:
          {{ final_custom_verification.stdout }}
          
          üìÇ SOURCE: {{ version_source }}
          
          ‚è∞ Timestamp: {{ deploy_timestamp }}
          ===============================================

  post_tasks:
    - name: "Criar relat√≥rio detalhado de deploy em arquivo"
      copy:
        content: |
          DEPLOY REPORT - VERSION UPDATE - {{ inventory_hostname }}
          =======================================================
          Date: {{ ansible_date_time.iso8601 }}
          Type: VERSION UPDATE (FULL) - Simple Structure
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Source: {{ version_source }}
          
          BACKUPS CREATED:
          - Full: {{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_full_backup_{{ deploy_timestamp }}.tar.gz
          - Custom backups: {{ custom_backup.stdout }}
          
          CUSTOM DIRECTORIES STATUS:
          {{ final_custom_verification.stdout }}
          
          HEALTH CHECK: {{ version_health_check.status | default('FAILED') }}
          
          PRE-DEPLOY CUSTOM STATUS:
          {{ pre_deploy_custom_check.stdout }}
          
          CUSTOM RESTORE STATUS:
          {{ custom_restore.stdout }}
          
          STARTUP MONITORING:
          {{ startup_monitoring.stdout }}
          
        dest: "{{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_deploy_report_{{ deploy_timestamp }}.txt"
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_user }}"
        mode: '0644'
      become: yes
      
    - name: "Log final do deploy de vers√£o"
      lineinfile:
        path: "{{ fsx_mount }}/logs/deploy-history.log"
        line: "{{ ansible_date_time.iso8601 }} - VERSION Deploy - {{ inventory_hostname }} - {{ 'SUCCESS' if version_health_check.status == 200 else 'NEEDS_CHECK' }} - simple structure - custom+custom_fsw preserved"
        create: yes
      delegate_to: localhost
      run_once: true

    - name: "Notifica√ß√£o final com status custom"
      debug:
        msg: |
          üéâ DEPLOY DE VERS√ÉO FINALIZADO!
          
          {{ final_custom_verification.stdout }}
          
          ‚ö†Ô∏è  IMPORTANTE:
          - Teste a aplica√ß√£o completamente antes de prosseguir
          - VERIFIQUE se custom e custom_fsw est√£o funcionando
          - Monitore logs por pelo menos 1 hora
          - Em caso de problemas, execute rollback imediatamente
          - Backup completo dispon√≠vel para rollback de emerg√™ncia
          
          üìÇ Source usado: {{ version_source }}
          üìÑ Relat√≥rio detalhado salvo em:
          {{ backup_base_dir }}/version/{{ deploy_date }}/{{ inventory_hostname }}_deploy_report_{{ deploy_timestamp }}.txt